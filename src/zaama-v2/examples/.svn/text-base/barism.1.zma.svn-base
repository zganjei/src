
vars : m0, m1, m2, t0, t1, t2


commands:

check_reachability:

initial: (and (= 1 m0) (= 0 m1)  (= 0 m2) (= 0 t0) (= 0 t1) (= 0 t2))

bad: (and (<= 1 m2) (<= 1 t2))

 preceq: (and (= m0 m0') (= m1 m1') (= m2 m2') (<= t0 t0') (<= t1 t1') (<= t2 t2'))


rules:

m0m0: (and (>= m0 1) (= t0' (+ t0 1))) 

m0m1: (and (>=m0 1) (= m0' (- m0 1)) (= m1' (+ m1 1)))

m1m1: (and (>=m1 1) (= t2' (- t2 1)))

m1m2: (and (>= m1 1) (= m1' (- m1 1)) (= m2' (+ m2 1)))

t0t1: (and (>= t0 1) (= t0' (- t0 1)) (= t1' (+ t1 1)))

t1t2: (and (>= t1 1) (= t1' (- t1 1)) (= t2' (+ t2 1)))

# gives the trace:
# reachable
# sequence exact:[id:1: (and (= m0 1) (= m1 0) (= m2 0) (= t0 0) (= t1 0) (= t2 0))]	 approx:[id:272: (and (>= m0 1) (>= m2 0) (>= m1 0) (>= t2 0) (>= t1 0) (>= t0 0))]
# rule: m0m0
# exact:[id:281: (and (= m0 1) (= m1 0) (= m2 0) (= t1 0) (= t2 0) (= t0 1))]	 approx:[id:170: (and (>= m0 1) (>= m2 0) (>= m1 0) (>= t2 0) (>= t1 0) (>= t0 1))]
# rule: t0t1
# exact:[id:285: (and (= m0 1) (= m1 0) (= m2 0) (= t2 0) (= t0 0) (= t1 1))]	 approx:[id:91: (and (>= m0 1) (>= m2 0) (>= m1 0) (>= t2 0) (>= t1 1))]
# rule: t1t2
# exact:[id:289: (and (= m0 1) (= m1 0) (= m2 0) (= t0 0) (= t1 0) (= t2 1))]	 approx:[id:68: (and (>= m0 1) (>= m2 0) (>= m1 0) (>= t2 1))]
# rule: m0m1
# exact:[id:293: (and (= m2 0) (= t0 0) (= t1 0) (= t2 1) (= m0 0) (= m1 1))]	 approx:[id:14: (and (>= m1 1) (>= m2 0) (>= t2 1))]
# rule: m1m2
# exact:[id:297: (and (= t0 0) (= t1 0) (= t2 1) (= m0 0) (= m1 0) (= m2 1))]	 approx:[id:2: (and (>= m2 1) (>= t2 1))]

#(m0) -> (m0, t0) -> (m0, t1) -> (m0, t2) -> (m1, t2)

# init: (m0_0=1, m1_0=0, m2_0=0, t0_0=0, t1_0=0, t2_0=0, i_0=0, w_0=0, size>=0) ->
# m0m0: (i_0<size, i_1=i_0+1, t0_1=t_0+1) ->
# t0t1: (t0_2=t0_1 - 1, t1_1 = t1_0 + 1, w_1 = w_0 + 1) ->
# t1t2: (t1_2 = t1_1 - 1, t2_1 = t2_0 + 1, w_1 = size, )
# m0m1:(m0_1= m0_0 - 1, m1_1 = m1_0 + 1, i_1 = size, i_2 = 0 )
# m1m2: (m1_2 = m1_1 - 1, m2_1 = m2_0 + 1, i_2 = size)


#iz3 gives:
# unsat
# (and (not (= 0 size)) (= (= i_2 size) (= size 0)))
# for:
# (declare-const m0_0 Int)
# (declare-const m0_1 Int)
# (declare-const m1_0 Int)
# (declare-const m1_1 Int)
# (declare-const m1_2 Int)
# (declare-const m2_0 Int)
# (declare-const m2_1 Int)
# (declare-const t0_0 Int)
# (declare-const t0_1 Int)
# (declare-const t0_2 Int)
# (declare-const t1_0 Int)
# (declare-const t1_1 Int)
# (declare-const t1_2 Int)
# (declare-const t2_0 Int)
# (declare-const t2_1 Int)
# (declare-const i_0 Int)
# (declare-const i_1 Int)
# (declare-const i_2 Int)
# (declare-const w_0 Int)
# (declare-const w_1 Int)
# (declare-const size Int)
# (compute-interpolant 
#   (and (= m0_0 1) (= m1_0 0) (= m2_0 0) (= t0_0 0) (= t1_0 0) (= t2_0 0) (= i_0 0) (= w_0 0) (>= size 0)
#        (< i_0 size) (= i_1 (+ i_0 1)) (= t0_1 (+ t0_0 1))
#        (= t0_2 (- t0_1  1)) (= t1_1 (+ t1_0 1)) (= w_1 (+ w_0  1))
#        (= t1_2 (- t1_1 1)) (= t2_1 (+ t2_0 1)) (= w_1 size)
#        (= m0_1 (- m0_0 1)) (= m1_1 (+ m1_0 1)) (= i_1 size) (= i_2 0))

#   (and (= m1_2 (- m1_1 1)) (= m2_1 (+ m2_0 1)) (= i_2 size)))
