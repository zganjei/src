
vars : think sread count swrite lock


commands:

check_reachability:

initial: (and (<= 0 think) (= sread 0) (= count 0) (= swrite 0) (= lock 1))

bad: (and (<= 1 swrite) (<= 1 sread))

# constrained preceq: (and (<= think think') (<= sread sread') (<= count count')(<= swrite swrite') (= lock lock')) : (= sread count) 

 preceq: (and (<= think think') (<= sread sread') (<= count count')(<= swrite swrite') (= lock lock'))


rules:

read1: (and (>= think 1) (>= sread 0) (= count 0) (>= swrite 0) (= lock 1)
	 (= think' (- think 1)) (= sread' (+ sread 1)) (= count' 1) 
	 (= swrite' swrite) (= lock' 0)) 

read2: ( and (>= think 1) (>= sread 0) (>= count 1) (>= swrite 0)
	 (= think' (- think 1)) (= sread' (+ sread 1)) (= count' (+ count 1))
	 (= swrite' swrite) (= lock' lock) )

think1: (and (>= think 0) (>= sread 1) (>= count 2) (>= swrite 0)
  	  (= think' (+ think 1)) (= sread' (- sread 1)) (= count' (- count 1))
	  (= swrite' swrite) (= lock' lock))

think2: (and (>= think 0) (>= sread 1) (= count 1) (>= swrite 0)
  	  (= think' (+ think 1)) (= sread' (- sread 1)) (= count' 0)
	  (= swrite' swrite) (= lock' 1))

write: (and (>= think 1) (>= sread 0) (>= count 0) (>= swrite 0) (= lock 1)
	 (= think' (- think 1)) (= sread' sread) (= count' count)
	 (= swrite' 1) (= lock' 0))

think3: (and (>= think 0) (>= sread 0) (>= count 0) (>= swrite 1) 
  	  (= think' (+ think 1)) (= sread' sread) (= count' count)
	  (= swrite' (- swrite 1)) (= lock' 1))



